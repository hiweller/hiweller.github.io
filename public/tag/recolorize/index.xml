<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>recolorize | Hannah Weller</title>
    <link>/tag/recolorize/</link>
      <atom:link href="/tag/recolorize/index.xml" rel="self" type="application/rss+xml" />
    <description>recolorize</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 13 Apr 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/media/icon_hu894dd0f75b84cd2ded4b9885934a1072_25364_512x512_fill_lanczos_center_2.png</url>
      <title>recolorize</title>
      <link>/tag/recolorize/</link>
    </image>
    
    <item>
      <title>Function gallery for recolorize</title>
      <link>/post/function-gallery-for-recolorize/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/function-gallery-for-recolorize/</guid>
      <description>&lt;p&gt;A quick reference gallery for what the most broadly useful functions do.&lt;/p&gt;
&lt;h3 id=&#34;loading-and-pre-processing-images&#34;&gt;Loading and pre-processing images&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;readImage&lt;/code&gt;: Reads in a PNG or JPEG image, optionally resizing and/or rotating it.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;img &amp;lt;- system.file(&amp;quot;extdata/corbetti.png&amp;quot;, package = &amp;quot;recolorize&amp;quot;)
loaded_image &amp;lt;- readImage(img_path = img, resize = NULL, rotate = NULL)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;blurImage&lt;/code&gt;: Applies one of several blurring filters from the &lt;code&gt;imager&lt;/code&gt; package to a loaded image. Helpful for dealing with variation from textures (e.g. scales, reflections, hairs, etc).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;blurred_image &amp;lt;- blurImage(loaded_image, blur_function = &amp;quot;medianblur&amp;quot;, n = 3, threshold = 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;initial-segmentation&#34;&gt;Initial segmentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;recolorize&lt;/code&gt;: The major function of the package. Segments colors using color binning (&lt;code&gt;method = &amp;quot;hist&amp;quot;&lt;/code&gt;) or k-means clustering (&lt;code&gt;method = &amp;quot;k&amp;quot;&lt;/code&gt;), in several color spaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rc_hist &amp;lt;- recolorize(img, method = &amp;quot;hist&amp;quot;, bins = 2, color_space = &amp;quot;sRGB&amp;quot;)
#&amp;gt; 
#&amp;gt; Using 2^3 = 8 total bins
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;384&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
rc_k &amp;lt;- recolorize(img, method = &amp;quot;k&amp;quot;, n = 8, color_space = &amp;quot;sRGB&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-4-2.png&#34; width=&#34;384&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;recolorize2&lt;/code&gt;: Runs &lt;code&gt;recolorize&lt;/code&gt; and &lt;code&gt;recluster&lt;/code&gt; (see next section) in sequence. I have found this to be an effective, fast combination for very many kinds of images, so if you&amp;rsquo;re going to pick one function to start with, pick this one!&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rc &amp;lt;- recolorize2(img, cutoff = 45)
#&amp;gt; 
#&amp;gt; Using 2^3 = 8 total bins
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-5-2.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;imposeColors&lt;/code&gt;: Imposes colors from one image onto another image (useful for batch processing).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;colors &amp;lt;- c(&amp;quot;tomato&amp;quot;,
            &amp;quot;limegreen&amp;quot;,
            &amp;quot;dodgerblue&amp;quot;,
            &amp;quot;cornsilk&amp;quot;,
            &amp;quot;black&amp;quot;)
colors &amp;lt;- t(col2rgb(colors)) / 255
imposed &amp;lt;- imposeColors(img, centers = colors)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;refining-initial-results&#34;&gt;Refining initial results&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;recluster&lt;/code&gt;: Combines existing clusters based on either a cutoff for color similarity or a target number of colors.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;recluster_fit &amp;lt;- recluster(rc_hist, similarity_cutoff = 45)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-7-2.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;thresholdRecolor&lt;/code&gt;: Drops the smallest clusters from a &lt;code&gt;recolorize&lt;/code&gt; fit and refits the original image.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rc_thresh &amp;lt;- thresholdRecolor(rc_hist, pct = 0.01)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wernerColor&lt;/code&gt;: Remaps a recolorize object to the colors in Werner&amp;rsquo;s Nomenclature of Colors by Patrick Syme (1821), one of the first attempts at an objective color reference in western science, notably used by Charles Darwin. This one is mostly just for fun.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rc_werner &amp;lt;- wernerColor(recluster_fit)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;minor-edits&#34;&gt;Minor edits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;absorbLayer&lt;/code&gt;: &amp;ldquo;Absorbs&amp;rdquo; all or part of a layer into the surrounding colors, optionally according to a size or location condition.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;absorb_red &amp;lt;- absorbLayer(recluster_fit,
                          layer_idx = 3, 
                          size_condition = function(s) s &amp;lt;= 100,
                          highlight_color = &amp;quot;cyan&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;editLayer&lt;/code&gt;/&lt;code&gt;editLayers&lt;/code&gt;: Applies one of several morphological operations from &lt;code&gt;imager&lt;/code&gt; to a layer (or layers) of a &lt;code&gt;recolorize&lt;/code&gt; object. This can be used to despeckle, fill in holes, or uniformly grow or shrink a color patch.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rc_edit &amp;lt;- editLayer(absorb_red, 
                      layer_idx = 3, 
                      operation = &amp;quot;fill&amp;quot;,
                      px_size = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mergeLayers&lt;/code&gt;: Merges specified layers together, with options for setting the new color.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;merged_rc &amp;lt;- mergeLayers(rc_hist, merge_list = list(c(4, 7),
                                                    c(3, 5), 
                                                    c(6, 8)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;visualization&#34;&gt;Visualization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plotImageArray&lt;/code&gt;: Plots a 1D or 3D array as an RGB image.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;layout(matrix(1:4, nrow = 1))
plotImageArray(loaded_image, main = &amp;quot;original&amp;quot;)
plotImageArray(loaded_image[ , , 1], main = &amp;quot;red&amp;quot;)
plotImageArray(loaded_image[ , , 2], main = &amp;quot;green&amp;quot;)
plotImageArray(loaded_image[ , , 3], main = &amp;quot;blue&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;imDist&lt;/code&gt; | &lt;code&gt;imHeatmap&lt;/code&gt;: Compares two versions of the same image by calculating the color distance between the colors of each pair of pixels (&lt;code&gt;imDist&lt;/code&gt;), and gives you a few more options for plotting the results (&lt;code&gt;imHeatmap&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;layout(matrix(1:2, nrow = 1))
par(mar = rep(0, 4))
im_dist &amp;lt;- imDist(im1 = raster_to_array(recluster_fit$original_img),
                  im2 = recoloredImage(recluster_fit), color_space = &amp;quot;Lab&amp;quot;)
imHeatmap(im_dist, palette = viridisLite::viridis(100), 
          legend = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;384&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plotColorClusters&lt;/code&gt;: Plots color clusters in a 3D color space.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;par(mar = rep(1, 4))
plotColorClusters(recluster_fit$centers, 
                  recluster_fit$sizes, 
                  color_space = &amp;quot;sRGB&amp;quot;,
                  xlab = &amp;quot;red&amp;quot;, ylab = &amp;quot;green&amp;quot;, zlab = &amp;quot;blue&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;384&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plotColorPalette&lt;/code&gt;: Alternatively, just plot as a color palette.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;par(mar = rep(0, 4))
plotColorPalette(recluster_fit$centers, recluster_fit$sizes)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;384&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;exporting-to-other-packages-or-files&#34;&gt;Exporting to other packages or files&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;splitByColor&lt;/code&gt;: Separates color clusters into individual layers (binary masks).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;layout(matrix(1:6, nrow = 1))
plotImageArray(rc_edit$original_img)
corbetti_layers &amp;lt;- splitByColor(rc_edit, plot_method = &amp;quot;over&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;classify_recolorize&lt;/code&gt;: Converts a &lt;code&gt;recolorize&lt;/code&gt; object to a &lt;a href=&#34;https://rdrr.io/cran/pavo/man/classify.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;classify&lt;/a&gt; object in the &lt;a href=&#34;https://rdrr.io/cran/pavo/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pavo&lt;/a&gt; package for linking with spectral data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;recolorize_adjacency&lt;/code&gt;: Converts to a &lt;code&gt;classify&lt;/code&gt; object using the above function, then runs the &lt;a href=&#34;https://rdrr.io/cran/pavo/man/adjacent.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;adjacency and boundary strength analysis&lt;/a&gt; function using values for human perceptual similarity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;recolorizeVector&lt;/code&gt;: Converts a bitmap (i.e. pixel) image to a vector image.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rc_vector &amp;lt;- recolorizeVector(recluster_fit, size_filter = 0.15, smoothness = 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/function-gallery-for-recolorize/index_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;144&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to recolorize</title>
      <link>/post/introduction-to-recolorize/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/introduction-to-recolorize/</guid>
      <description>&lt;h2 id=&#34;color-based-image-segmentation-for-people-with-other-things-to-do&#34;&gt;color-based image segmentation (for people with other things to do)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can also tour the functions in the &lt;a href=&#34;gallery.html&#34;&gt;function gallery&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;recolorize&lt;/code&gt; package is a toolbox for making color maps, essentially color-based image segmentation, using a combination of automatic, semi-automatic, and manual procedures. It has four major goals:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Provide a middle ground between automatic segmentation methods (which are hard to modify when they don&amp;rsquo;t work well) and manual methods (which can be slow and subjective).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be deterministic whenever possible, so that you always get the same results from the same code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be modular and modifiable, so that you can tailor it for your purposes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Play nice with other color analysis tools.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The color map above, for example, was generated using a single function which runs in a few seconds (and is deterministic):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(recolorize)

# get the path to the image (comes with the package, so we use system.file):
img &amp;lt;- system.file(&amp;quot;extdata/corbetti.png&amp;quot;, package = &amp;quot;recolorize&amp;quot;)

# fit a color map (only provided parameter is a color similarity cutoff)
recolorize_obj &amp;lt;- recolorize2(img, cutoff = 45)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice what we didn’t have to input: we didn’t have to declare how many colors we expected (5), what we expect those colors to be (red, green, blue, black, and white), which pixels to include in each color patch, or where the boundaries of those patches are.&lt;/p&gt;
&lt;p&gt;This introduction is intended to get you up and running with the &lt;code&gt;recolorize&lt;/code&gt; package. Ideally, after reading it, you will have enough information to start to play around with the set of tools that it provides in a way that suits what you need it to do.&lt;/p&gt;
&lt;p&gt;I have tried not to assume too much about the reader&amp;rsquo;s background knowledge and needs, except that you are willing to use R and you have a color segmentation problem you have to solve before you can do something interesting with images. I primarily work with images of animals (beetles, fish, lizards, butterflies, snakes, birds, etc), and that will probably come through in the documentation. But it should work just as well for other kinds of images. Maybe better!&lt;/p&gt;
&lt;p&gt;I hope that this package will be helpful to you, and that if it is, you will share it with others who might find it helpful too. I had a lot of fun discussions with a lot of interesting people while I was making it, for which I&amp;rsquo;m very grateful.&lt;/p&gt;
&lt;p&gt;If something is unclear or you find a bug, please get in touch or &lt;a href=&#34;https://github.com/hiweller/recolorize/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;file an issue on the GitHub page&lt;/a&gt;. Suggestions for improvements are always welcome!&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;Quick start&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The bare minimum to start toying around with the package.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The basic &lt;code&gt;recolorize&lt;/code&gt; workflow is initial clustering step &lt;code&gt;\(\rightarrow\)&lt;/code&gt; refinement step &lt;code&gt;\(\rightarrow\)&lt;/code&gt; manual tweaks.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Images should first be color-corrected and have any background masked out, ideally with transparency, as in the image above, for example (&lt;em&gt;Chrysochroa corbetti&lt;/em&gt;, taken by &lt;a href=&#34;https://www.thelordlab.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nathan P. Lord&lt;/a&gt;, used with permission and egregiously downsampled to ~250x150 pixels by me).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the initial clustering step, we bin all of the pixels into (in this case) 8 total clusters:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;init_fit &amp;lt;- recolorize(img, method = &amp;quot;hist&amp;quot;, bins = 2, 
                       color_space = &amp;quot;sRGB&amp;quot;)
#&amp;gt; 
#&amp;gt; Using 2^3 = 8 total bins
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;384&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Followed by a refinement step where we combine clusters by their similarity:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;refined_fit &amp;lt;- recluster(init_fit, similarity_cutoff = 45)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-5-2.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# pretty big improvement!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;recolorize2&lt;/code&gt; function above calls these functions in sequence, since they tend to be pretty effective in combination.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Finally, we can do manual refinements to clean up the different color layers, for example absorbing the red speckles into the surrounding color patches:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;absorb_red &amp;lt;- absorbLayer(refined_fit, layer_idx = 3,
                          size_condition = function(s) s &amp;lt;= 15,
                          highlight_color = &amp;quot;cyan&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Or performing simple morphological operations on individual layers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;final_fit &amp;lt;- editLayer(absorb_red, 3,
                        operation = &amp;quot;fill&amp;quot;, px_size = 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also batch process images using the same parameters, although &lt;code&gt;recolorize&lt;/code&gt; functions only deal with one image at a time, so you will have to use a for loop or define a new function to call the appropriate functions in the right order:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# get all 5 beetle images:
images &amp;lt;- dir(system.file(&amp;quot;extdata&amp;quot;, package = &amp;quot;recolorize&amp;quot;), &amp;quot;png&amp;quot;, full.names = TRUE)

# make an empty list to store the results:
rc_list &amp;lt;- vector(&amp;quot;list&amp;quot;, length = length(images))

# run `recolorize2` on each image
# you would probably want to add more sophisticated steps in here as well, but you get the idea
for (i in 1:length(images)) {
  rc_list[[i]] &amp;lt;- suppressMessages(recolorize2(images[i], bins = 2, 
                              cutoff = 30, plotting = FALSE))
}

# plot for comparison:
layout(matrix(1:10, nrow = 2))
for (i in rc_list) {
  plotImageArray(i$original_img)
  plotImageArray(recoloredImage(i))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# given the variety of colors in the dataset, not too bad, 
# although you might go in and refine these individually
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you have a color map you&amp;rsquo;re happy with, you can export to a variety of formats. For instance, if I wanted to run Endler&amp;rsquo;s &lt;a href=&#34;https://rdrr.io/cran/pavo/man/adjacent.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;adjacency and boundary strength analysis&lt;/a&gt; in the &lt;code&gt;pavo&lt;/code&gt; package, using human perception:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;adj &amp;lt;- recolorize_adjacency(rc_list[[1]], coldist = &amp;quot;default&amp;quot;, hsl = &amp;quot;default&amp;quot;)
#&amp;gt; Using single set of coldists for all images.
#&amp;gt; Using single set of hsl values for all images.
print(adj[ , c(57:62)]) # just print the chromatic and achromatic boundary strength values
#&amp;gt;      m_dS     s_dS     cv_dS     m_dL     s_dL     cv_dL
#&amp;gt;  36.33178 11.90417 0.3276517 24.88669 17.80173 0.7153115
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you&amp;rsquo;d like a deeper explanation of each of these steps, as well as how to modify them to suit your needs, along with what else the package can do: read on!&lt;/p&gt;
&lt;h2 id=&#34;before-you-start&#34;&gt;Before you start&lt;/h2&gt;
&lt;p&gt;Color segmentation can be a real rabbit hole—that is, it can be pretty easy to become fixated on getting perfect results, or on trying to define some objective standard for what correct segmentation looks like. The problem with this mindset is that there’s no set of universal parameters that will give you perfect segmentation results for every image, because images alone don’t always contain all the relevant information: color variation due to poor lighting in one image could be just as distinct as color variation due to pattern striations in another.&lt;/p&gt;
&lt;p&gt;The correct output for color segmentation depends on your goal: are you concerned with identifying regions of structural vs. pigmented color? Does the intensity of the stain on your slide matter, or just presence/absence? If you have a few dozen stray pixels of the wrong color in an image with hundreds of thousands of correctly categorized pixels, will that meaningfully affect your calculations?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take the jewel beetle (family Buprestidae) images that come with the package as an example. If I want to segment the lefthand image (&lt;em&gt;Chrysochroa fulgidissima&lt;/em&gt;), the solution depends on my question. If my question is &amp;ldquo;How does the placement and size of these red bands compare to that of closely related beetles?&amp;rdquo; then I really just want to separate the red bands from the rest of the body, so I would want the color map in the middle. If my question is &amp;ldquo;How much do these red bands stand out from the iridescent green base of the beetle?&amp;rdquo; then I care about the brighter orange borders of the bands, because these increase the boundary strength and overall contrast in the beetle&amp;rsquo;s visual appearance—so I would go with map 2 on the right.
&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So before you start, I highly recommend writing down &lt;em&gt;precisely&lt;/em&gt; what you want to measure at the end of your analysis, to avoid becoming weighed down by details that may not matter. It will save you a lot of time.&lt;/p&gt;
&lt;h2 id=&#34;step-0-image-acquisition--preparation&#34;&gt;Step 0: Image acquisition &amp;amp; preparation&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;What to do before you use recolorize.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before we attempt image segmentation, we need segmentable images. &lt;code&gt;recolorize&lt;/code&gt; doesn’t process your images for you beyond a few basic things like resizing, rotating, and blurring (which can help with segmentation). You should do all image processing steps which are usually necessary for getting quantitative color data, like white balance correction, gradient correction, or background removal, before inputting them to &lt;code&gt;recolorize&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are lots of software tools available for making these kinds of corrections: GIMP, FIJI/ImageJ, and even the imager package will provide options for some or all of these. If you really want to get pipeline-y, Python has a much more robust set of image processing libraries that will help with automatic color correction and background masking, which is well beyond the scope of this intro.&lt;/p&gt;
&lt;p&gt;If you are at all concerned with sensory biology and animal vision, I highly recommend &lt;a href=&#34;http://www.empiricalimaging.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;micaToolbox&lt;/a&gt;, which is a well-documented and comprehensive toolkit for creating images as animals see them (rather than as cameras and computers see them); see especially the instructions for creating false color &lt;a href=&#34;http://www.empiricalimaging.com/knowledge-base/creating-cone-catch-models/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cone-mapped images&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The corrections you have to make really depend on what you’re trying to do. If you just care about the regions but don’t really care about the final colors they end up being assigned, you probably don’t need to worry too much about color correction; if you’re working with histology slides, you probably don’t need to mask the background; if you have a really even and diffuse lighting setup, you probably won’t have to deal with shadows or gradients.&lt;/p&gt;
&lt;h3 id=&#34;background-masking-with-transparencies&#34;&gt;Background masking with transparencies&lt;/h3&gt;
&lt;p&gt;If you’re masking the background, use transparencies. This is pretty easy to do in GIMP, Photoshop, or ImageJ. The transparency layer (or alpha channel) is the fourth channel of an image (the other three being the R, G, and B channels), and &lt;code&gt;recolorize&lt;/code&gt; treats it like a binary mask: any pixel with an alpha value of 1 is retained, and any pixel with an alpha value of &amp;lt; 1 is ignored. This means you don’t have to worry about finding a uniform background color that is sufficiently different from your foreground object in every image, which can otherwise be a real pain.&lt;/p&gt;
&lt;p&gt;Using transparency is unambiguous, and has the bonus benefit of making for nicer plots, too, since you don’t have to worry about the corners of your images overlapping and blocking each other. All the images in this demo have transparent backgrounds. However, you can use the lower and upper arguments to set boundaries for excluding pixels as background based on their color (see documentation). Just know that these will be set to transparent internally.&lt;/p&gt;
&lt;h2 id=&#34;step-1-loading--processing-images&#34;&gt;Step 1: Loading &amp;amp; processing images&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;How to get images into R.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can read in an image by passing the filepath to the &lt;code&gt;readImage&lt;/code&gt; function. This is a pretty generic function (almost every image processing package in R has something similar); the &lt;code&gt;recolorize&lt;/code&gt; version doesn&amp;rsquo;t even assign the output to a special class (so don&amp;rsquo;t try to print it).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# define image path - we&#39;re using an image that comes with the package
img_path &amp;lt;- system.file(&amp;quot;extdata/corbetti.png&amp;quot;, package = &amp;quot;recolorize&amp;quot;)

# load image
img &amp;lt;- readImage(img_path, resize = NULL, rotate = NULL)

# it&#39;s just an array with 4 channels:
dim(img)
#&amp;gt; [1] 243 116   4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An image is a numeric array with either 3 or 4 channels (R, G, B, and optionally alpha for transparency). JPG images will only have 3 channels; PNG images will have 4. This is quite a small image (243x116 pixels) with 4 channels.&lt;/p&gt;
&lt;p&gt;We can plot the whole array as an image, or plot one channel at a time. Notice that the red patches are bright in the R channel, same for blue-B channel, green-G channel, etc—and that the off-white patch is bright for all channels, while the black patches are dark in all channels. The alpha channel is essentially just a mask that tells us which parts of the image to ignore when processing it further.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;layout(matrix(1:5, nrow = 1))
plotImageArray(img, main = &amp;quot;RGB image&amp;quot;)
plotImageArray(img[ , , 1], main = &amp;quot;R channel&amp;quot;)
plotImageArray(img[ , , 2], main = &amp;quot;G channel&amp;quot;)
plotImageArray(img[ , , 3], main = &amp;quot;B channel&amp;quot;)
plotImageArray(img[ , , 4], main = &amp;quot;Alpha channel&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Optionally, when you load the image, you can resize it (highly recommended for large images) and rotate it. Image processing is computationally intensive, and R is not especially good at it, so downsampling it usually a good idea. A good rule of thumb for downsampling is that you want the smallest details you care about in the image (say, spots on a ladybug) to be about 5 pixels in diameter (so if your spots have a 20 pixel diameter, you can set &lt;code&gt;resize = 0.25&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The only other thing you might do to your images before sending them to the main &lt;code&gt;recolorize&lt;/code&gt; functions is &lt;code&gt;blurImage&lt;/code&gt;. This is really useful for minimizing color variation due to texture (e.g. scales on a lizard, feathers on a bird, sensory hairs on an insect), and you can apply one of several smoothing algorithms from the &lt;code&gt;imager&lt;/code&gt; package, including edge-preserving blurs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;blurred_img &amp;lt;- blurImage(img, blur_function = &amp;quot;blur_anisotropic&amp;quot;,
                         amplitude = 10, sharpness = 0.2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This step is optional: most of the &lt;code&gt;recolorize&lt;/code&gt; functions will accept a path to an image as well as an image array. But once you&amp;rsquo;re happy here, we can start defining color regions!&lt;/p&gt;
&lt;h2 id=&#34;step-2-initial-clustering&#34;&gt;Step 2: Initial clustering&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Go from thousands of colors to a manageable number for further refinement.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The color clustering in recolorize usually starts with an initial clustering step which produces more color clusters than the final color map will have, which are then edited and combined to form the final color map. We start with an over-clustering step because it is a quick way to go from an overwhelming number of colors (256^3 unique RGB colors) to a manageable number that can be manually inspected or automatically re-clustered. You’ll usually do this using the &lt;code&gt;recolorize&lt;/code&gt; function, which is the core of the package (go figure!):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;corbetti &amp;lt;- system.file(&amp;quot;extdata/corbetti.png&amp;quot;, package = &amp;quot;recolorize&amp;quot;)
recolorize_defaults &amp;lt;- recolorize(img = corbetti)
#&amp;gt; 
#&amp;gt; Using 2^3 = 8 total bins
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;384&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This function does a lot under the hood: we read in the image as an array, binned every pixel in the image into one of eight bins in RGB color space, calculated the average color of all the pixels assigned to a given bin, recolored the image to show which pixel was assigned to which color center, and returned all of that information in the &lt;code&gt;recolorize_defaults&lt;/code&gt; object. Pretty much everything beyond this step will be a modification of one of those elements, so we&amp;rsquo;ll take a second to examine the contents of that output.&lt;/p&gt;
&lt;h3 id=&#34;the-recolorize-class&#34;&gt;The &lt;code&gt;recolorize&lt;/code&gt; class&lt;/h3&gt;
&lt;p&gt;Objects of S3 class &lt;code&gt;recolorize&lt;/code&gt; are lists with several elements:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attributes(recolorize_defaults)
#&amp;gt; $names
#&amp;gt; [1] &amp;quot;original_img&amp;quot;      &amp;quot;centers&amp;quot;           &amp;quot;sizes&amp;quot;            
#&amp;gt; [4] &amp;quot;pixel_assignments&amp;quot;
#&amp;gt; 
#&amp;gt; $class
#&amp;gt; [1] &amp;quot;recolorize&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;original_img&lt;/code&gt; is a a &lt;code&gt;raster&lt;/code&gt; matrix, essentially a matrix of hex color codes. This is a more lightweight version of the 3D/4D color image array we loaded earlier, and can be plotted easily by running &lt;code&gt;plot(recolorize_defaults$original_img)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;centers&lt;/code&gt; is a matrix of RGB centers (0-1 range) for each of the color patches. Their order matches the index values in the &lt;code&gt;pixel_assignments&lt;/code&gt; matrix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sizes&lt;/code&gt; is a vector of patch sizes, whose order matches the row order of &lt;code&gt;centers&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pixel_assignments&lt;/code&gt; is a paint-by-numbers matrix, where each pixel is coded as the color center to which it was assigned. For example, cells with a &lt;code&gt;1&lt;/code&gt; have been assigned to the color represented by row 1 of &lt;code&gt;centers&lt;/code&gt;. Background pixels are marked as 0.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you plot the whole &lt;code&gt;recolorize&lt;/code&gt; object, you&amp;rsquo;ll get back the plot you see above: the original image, the color map (where each pixel has been recolored), and the color palette. You can also plot each of these individually:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;layout(matrix(1:3, nrow = 1), widths = c(0.45, 0.45, 0.1))
par(mar = rep(0, 4))
plot(recolorize_defaults$original_img)
plotImageArray(recolorize_defaults$pixel_assignments / 8)
plotColorPalette(recolorize_defaults$centers, recolorize_defaults$sizes,
                 horiz = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;384&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll notice this doesn&amp;rsquo;t look exactly like the function output above. Aside from some wonky scaling issues, the pixel assignment matrix plotted as a grayscale image (and we had to divide it by the number of colors in the image so it was in a 0-1 range). That&amp;rsquo;s because we didn&amp;rsquo;t tell R which colors to make each of those values, so layer 1 is the darkest color and layer 8 is the brightest color in the image.&lt;/p&gt;
&lt;p&gt;You can get the recolored image by calling &lt;code&gt;recoloredImage&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# type = raster gets you a raster (like original_img); type = array gets you an 
# image array
recolored_img &amp;lt;- recoloredImage(recolorize_defaults, type = &amp;quot;array&amp;quot;)
plotImageArray(recolored_img)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;192&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;recoloredImage&lt;/code&gt; is just a shortcut function for &lt;code&gt;constructImage&lt;/code&gt;, which lets you decide which colors to assign to each category in case you want to swap out the palette:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;colors &amp;lt;- c(&amp;quot;navy&amp;quot;, &amp;quot;lightblue&amp;quot;, &amp;quot;blueviolet&amp;quot;,
            &amp;quot;turquoise&amp;quot;, &amp;quot;slateblue&amp;quot;, &amp;quot;royalblue&amp;quot;, 
            &amp;quot;aquamarine&amp;quot;, &amp;quot;dodgerblue&amp;quot;)
blue_beetle &amp;lt;- constructImage(recolorize_defaults$pixel_assignments, 
               centers = t(col2rgb(colors) / 255))

# a very blue beetle indeed:
plotImageArray(blue_beetle)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;192&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now that you have a better understanding of what these objects contain and what to do with them, we can start to unpack exactly what this function is doing.&lt;/p&gt;
&lt;h3 id=&#34;the-recolorize-function&#34;&gt;The &lt;code&gt;recolorize&lt;/code&gt; function&lt;/h3&gt;
&lt;p&gt;The main &lt;code&gt;recolorize&lt;/code&gt; function has a simple goal: to take your image from a huge number of colors to a manageable number of color clusters. This falls under a category of methods for &lt;a href=&#34;https://en.wikipedia.org/wiki/Color_quantization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;color quantization&lt;/a&gt;, although we have a slightly different goal here. The typical reason for doing color quantization is to simplify an image while making it look as visually similar as possible to the original; our goal is not to represent the original image, but to create a set of building blocks to combine and clean up so we can refer to whole color patches easily.&lt;/p&gt;
&lt;p&gt;If you look at the documentation for the &lt;code&gt;recolorize&lt;/code&gt; function, you’ll see a lot of user-specifiable parameters. There are only really 3 major ones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the color space in which the clustering is done (&lt;code&gt;color_space&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;the clustering method (the &lt;code&gt;method&lt;/code&gt; argument)&lt;/li&gt;
&lt;li&gt;the number of color clusters (&lt;code&gt;bins&lt;/code&gt; for &lt;code&gt;method = hist&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; for &lt;code&gt;method = kmeans&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can also map an image to an externally imposed set of colors using another function, &lt;code&gt;imposeColors&lt;/code&gt;, which can be useful for batch processing images.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll go over each of these parameters and what they do. I&amp;rsquo;ll give mild advice about how to navigate these options, but there&amp;rsquo;s a reason I&amp;rsquo;ve included all of theme here, which is that I think any combination of these parameters can be useful depending on the context.&lt;/p&gt;
&lt;h4 id=&#34;color-spaces&#34;&gt;Color spaces&lt;/h4&gt;
&lt;p&gt;Color spaces are ways to represent colors as points in multi-dimensional spaces, where each axis corresponds to some aspect of the color. You&amp;rsquo;re probably familiar with RGB (red-green-blue) color space and HSV (hue-saturation-value) color space. In RGB space, colors vary by the amount of red, green, and blue they have, where a coordinate of [0, 0, 1] would be pure blue (no red or green), [1, 1, 1] would be white, [0, 1, 1] would be cyan, etc. This is how most images are stored and displayed on computers, although it&amp;rsquo;s not always very intuitive.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;recolorize&lt;/code&gt; package gives you a variety of options for color spaces, but by far the two most commonly used are RGB (&lt;code&gt;color_space = sRGB&lt;/code&gt;) and CIE Lab (&lt;code&gt;color_space = Lab&lt;/code&gt;). CIE Lab is popular because it approximates perceptual uniformity, which means that the distances between colors in CIE Lab space are proportional to how different they actually seem to human beings. The axes represent luminance (L, 0 = black and 100 = white), red-green (a, negative values = more green and positive values = more red), and blue-yellow (b, negative values = more blue and positive values = more yellow). The idea is that something can be greenish-blue, or reddish-yellow, but not reddish-green, etc. This can be a little confusing, but the results it provides are really intuitive. For example, in RGB space, red is as similar to yellow as it is to black. In CIE Lab, red and yellow are close together, and are about equally far from black.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve written in more detail about color spaces for another package &lt;a href=&#34;https://cran.r-project.org/web/packages/colordistance/vignettes/color-spaces.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;, which I would recommend reading for a more detailed overview, but let&amp;rsquo;s see what happens if we plot all of the non-background pixels from our &lt;em&gt;C. corbetti&lt;/em&gt; example in RGB compared to CIE Lab color space (forgive the crummy plotting):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-19-2.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can identify green, red, blue, black, and white pixels in both sets of plots, but their distributions are very different.&lt;/p&gt;
&lt;p&gt;In practice, I find myself toggling between these two color spaces depending on the color distributions in my images. For example, when dealing with &lt;em&gt;C. corbetti&lt;/em&gt;, I would use RGB, because the beetle is literally red, green, and blue. When dealing with the red and green &lt;em&gt;C. fulgidissima&lt;/em&gt; above, I found that CIE Lab produced better results, because it separates red and green pixels by much more distance. But in general, especially as you increase the number of initial clusters, this matters less at this stage than at the refinement stage (where you can switch between color spaces again). Because CIE Lab is not evenly distributed on all axes (i.e. is not a cube), you may need to use more bins in CIE Lab space than in RGB. (Try fitting the &lt;em&gt;C. corbetti&lt;/em&gt; image with CIE Lab space and see what happens for an idea of how much the choice of color space can matter.)&lt;/p&gt;
&lt;h4 id=&#34;clustering-methods&#34;&gt;Clustering methods&lt;/h4&gt;
&lt;p&gt;The two clustering methods in &lt;code&gt;recolorize&lt;/code&gt; are color histogram binning (fast, consistent, and deterministic) and k-means clustering (comparatively slower and heuristic, but more intuitive). The &lt;code&gt;bins&lt;/code&gt; argument is accessed by the histogram method, and &lt;code&gt;n&lt;/code&gt; goes with the kmeans method. I highly recommend the histogram binning unless you have a good reason not to use it, but there are good reasons to use k-means clustering sometimes.&lt;/p&gt;
&lt;p&gt;The histogram binning method is essentially just a 3-dimensional color histogram: we divide up each channel of a color space into a predetermined number of bins, then count the number of pixels that fall into that bin and calculate their average color. So, when we divide each of 3 color channels into 2 bins, we end up with &lt;code&gt;\(2^3 = 8\)&lt;/code&gt; total bins (which is why setting &lt;code&gt;bins = 2&lt;/code&gt; will produce 8 colors as above).&lt;/p&gt;
&lt;p&gt;k-means clustering, on the other hand, is a well-known method for partitioning data into n clusters. You just provide the number of clusters you want, and it will try to find the best locations for them, where ‘best’ means minimizing the squared Euclidean distances between pixels and color centers within each cluster.&lt;/p&gt;
&lt;p&gt;To appreciate these differences, we can fit the same number of colors (64) using the histogram method and the k-means method on the same image, then view the resulting color distributions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# fit 64 colors, both ways
r_hist &amp;lt;- recolorize(img_path, method = &amp;quot;hist&amp;quot;, bins = 4, plotting = FALSE)
#&amp;gt; 
#&amp;gt; Using 4^3 = 64 total bins
r_k &amp;lt;- recolorize(img_path, method = &amp;quot;k&amp;quot;, n = 64, plotting = FALSE)

plotColorClusters(r_hist$centers, r_hist$sizes, plus = .5,
                  xlab = &amp;quot;red&amp;quot;, ylab = &amp;quot;green&amp;quot;, zlab = &amp;quot;blue&amp;quot;, 
                  mar = c(3, 3, 2, 2),
                  main = &amp;quot;Histogram method&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plotColorClusters(r_k$centers, r_k$sizes, plus = .5,
                  xlab = &amp;quot;red&amp;quot;, ylab = &amp;quot;green&amp;quot;, zlab = &amp;quot;blue&amp;quot;,
                  mar = c(3, 3, 2, 2),
                  main = &amp;quot;k-means clustering&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-20-2.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The histogram method produced a lot of tiny, nearly-empty clusters that are evenly distributed in the color space, with only a few large clusters (like the black and white ones). The k-means clustering method, on the other hand, produced a lot more medium-sized clusters, as well as splitting the black and white patches across multiple clusters.&lt;/p&gt;
&lt;p&gt;A lot of color segmentation tools will &lt;em&gt;only&lt;/em&gt; use k-means clustering (or a similar method), because it’s relatively easy to implement and does produce good results if your images have clear color boundaries and very different colors (i.e. the pixels are far apart in color space). If you were going to stop at the initial clustering step, this would probably be a better option than the histogram binning for that reason. The main reason I recommend against it is that it is not deterministic: you will get different colors, and in a different order, every time you run it. For example, if we fit 10 colors three separate times, we get the following color palettes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;k_list &amp;lt;- lapply(1:3, function(i) recolorize(img_path, &amp;quot;k&amp;quot;, n = 10, plotting = F))

layout(1:3)
par(mar = rep(1, 4))
lapply(k_list, function(i) plotColorPalette(i$centers, i$sizes))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; [[1]]
#&amp;gt; NULL
#&amp;gt; 
#&amp;gt; [[2]]
#&amp;gt; NULL
#&amp;gt; 
#&amp;gt; [[3]]
#&amp;gt; NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The colors are similar, but not identical, and they are returned in an arbitrary order. If you run this code one day and pull out all the red clusters by their index, or merge the multiple green clusters, those values will change the next time you run the code. That and the need to specify cluster numbers for each image are more or less why I recommend not using this method unless you have a reason.&lt;/p&gt;
&lt;p&gt;Binning the colors (histograms) is usually more viable as a first step. It’s quite fast, since we’re not really doing any clustering; the bins we assign the pixels to will be the same for every image, and we’re not calculating the distances between the pixels and their assigned color. It’s also deterministic, which means you get the same result every single time you run it. The downside is that makes this approach almost guaranteed to over-split colors, since your color regions will rarely fall cleanly within the boundaries of these bins, and many of the bins you end up with will be empty or have very few pixels.&lt;/p&gt;
&lt;h3 id=&#34;number-of-clusters&#34;&gt;Number of clusters&lt;/h3&gt;
&lt;p&gt;Unlike the color space and binning method, this parameter is pretty intuitive: the more clusters you fit, the more the colors in your image will be split up. It’s convenient to use the same scheme for every image in your dataset, so you might end up using whatever values are needed for your most complex image and over-splitting most of your other images. That’s usually fine, because the next set of steps will try to lump colors together or remove minor details. You want to be just granular enough to capture the details you care about, and it’s okay if some colors are split up.&lt;/p&gt;
&lt;p&gt;One thing to note is that the &lt;code&gt;bins&lt;/code&gt; argument allows for a different number of bins for each channel. Setting &lt;code&gt;bins = 2&lt;/code&gt; will divide each channel into 2 bins, but you can also set &lt;code&gt;bins = c(5, 2, 2)&lt;/code&gt; to divide up the red channel into 5 bins and the blue and green channels into 2 bins (if in RGB space). This can be convenient if you have a lot of color diversity on only one axis, e.g. you have photographs of mammals which are shades of reddish-brown, and don&amp;rsquo;t need to waste computational time dividing up the blue channel.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# we can go from an unacceptable to an acceptable color map in 
# CIE Lab space by adding a single additional bin in the luminance channel:
r_hist_2 &amp;lt;- recolorize(img_path, method = &amp;quot;hist&amp;quot;, color_space = &amp;quot;Lab&amp;quot;, 
                     bins = 2)
#&amp;gt; 
#&amp;gt; Using 2^3 = 8 total bins
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;384&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;r_hist_322 &amp;lt;- recolorize(img_path, 
                     method = &amp;quot;hist&amp;quot;,
                     bins = c(3, 2, 2))
#&amp;gt; 
#&amp;gt; Using 3*2*2 = 12 bins
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-22-2.png&#34; width=&#34;384&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;imposecolors&#34;&gt;&lt;code&gt;imposeColors()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Another option is to impose colors on an image, rather than using intrinsic image colors. Every pixel is assigned to the color it is closest to in some specified color space. Usually, this is useful for batch processing: you get colors from one image, then map them onto another image, so that the color centers correspond across all your images.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;im1 &amp;lt;- system.file(&amp;quot;extdata/ocellata.png&amp;quot;, package = &amp;quot;recolorize&amp;quot;)
im2 &amp;lt;- system.file(&amp;quot;extdata/ephippigera.png&amp;quot;, package = &amp;quot;recolorize&amp;quot;)

# fit the first image
fit1 &amp;lt;- recolorize(im1)
#&amp;gt; 
#&amp;gt; Using 2^3 = 8 total bins
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;384&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
# fit the second image using colors from the first
# adjust_centers = TRUE would find the average color of all the pixels assigned to 
# the imposed colors to better match the raw image
fit2 &amp;lt;- imposeColors(im2, fit1$centers, adjust_centers = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-23-2.png&#34; width=&#34;384&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-3-refinement&#34;&gt;Step 3: Refinement&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Using simple rules to improve the initial results.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once we’ve reduced an image down to a tractable number of colors, we can define simple procedures for how to combine them based on similarity. &lt;code&gt;recolorize&lt;/code&gt; (currently) comes with two of these: &lt;code&gt;recluster&lt;/code&gt;, which merges colors by perceived similarity, and &lt;code&gt;thresholdRecolor&lt;/code&gt;, which drops minor colors. Both are simple, but surprisingly effective. They’re also built on top of some really simple functions we’ll see in a bit, so if you need to, you can build out a similar procedure tailored to your dataset—for example, combining layers based only on their brightness values, or only combining green layers.&lt;/p&gt;
&lt;h3 id=&#34;recluster-and-recolorize2&#34;&gt;&lt;code&gt;recluster()&lt;/code&gt; and &lt;code&gt;recolorize2()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is the one I use the most often, and its implementation is really simple. This function calculates the Euclidean distances between all the color centers in a recolorize object, clusters them hierarchically using &lt;code&gt;hclust&lt;/code&gt;, then uses a user-specified cutoff to combine the most similar colors. As with &lt;code&gt;recolorize&lt;/code&gt;, you can choose your color space, and that will make a big difference. Let’s see this in action:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;recluster_results &amp;lt;- recluster(recolorize_defaults, 
                               similarity_cutoff = 45)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-24-2.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Notice the color dendrogram: it lumped together clusters 4 &amp;amp; 7, clusters 3 &amp;amp; 5, and clusters 6 &amp;amp; 8, because their distance was less than 45. This is in CIE Lab space; if we use RGB space, the range of distances is 0-1:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;recluster_rgb &amp;lt;- recluster(recolorize_defaults, color_space = &amp;quot;sRGB&amp;quot;,
                           similarity_cutoff = 0.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-25-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-25-2.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In this case, we get the same results, but this is always worth playing around with. Despite its simplicity, this function is highly effective at producing intuitive results. This is partly because, in only using color similarity to combine clusters, it does not penalize smaller color clusters that can still retain important details. I find myself using it so often that I included a wrapper function, &lt;code&gt;recolorize2&lt;/code&gt;, to run &lt;code&gt;recolorize&lt;/code&gt; and &lt;code&gt;recluster&lt;/code&gt; sequentially in a single step:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# let&#39;s use a different image:
img &amp;lt;- system.file(&amp;quot;extdata/chongi.png&amp;quot;, package = &amp;quot;recolorize&amp;quot;)

# this is identical to running:
# fit1 &amp;lt;- recolorize(img, bins = 3)
# fit2 &amp;lt;- recluster(fit1, similarity_cutoff = 50)
chongi_fit &amp;lt;- recolorize2(img, bins = 3, cutoff = 45)
#&amp;gt; 
#&amp;gt; Using 3^3 = 27 total bins
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-26-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-26-2.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There’s also a lot of room for modification here: this is a pretty unsophisticated rule for combining color clusters (ignoring, for example, cluster size, proximity, geometry, and boundary strength), but it’s pretty simple to write better rules if you can think of them, because the functions that are called to implement this are also exported by the package.&lt;/p&gt;
&lt;h3 id=&#34;thresholdrecolor&#34;&gt;&lt;code&gt;thresholdRecolor()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;An even simpler rule: drop the smallest color clusters whose cumulative sum (as a proportion of total pixels assigned) is lower than some threshold, like 5% of the image. I thought this would be too simple to be useful, but every once in a while it’s just the thing, especially if you always end up with weird spurious details.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;chongi_threshold &amp;lt;- thresholdRecolor(chongi_fit, pct = 0.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-27-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-4-minor-edits&#34;&gt;Step 4: Minor edits&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Cleaning up the details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These are functions that can be called individually to address problem areas in specific images, or strung together as building blocks to do more complicated operations.&lt;/p&gt;
&lt;h3 id=&#34;absorblayer&#34;&gt;&lt;code&gt;absorbLayer&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;Absorbs&amp;rdquo; all or part of a layer into the surrounding colors, optionally according to a size or location condition.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;img &amp;lt;- system.file(&amp;quot;extdata/fulgidissima.png&amp;quot;, package = &amp;quot;recolorize&amp;quot;)
ful_init &amp;lt;- recolorize2(img, bins = 3, cutoff = 60, plotting = F)
#&amp;gt; 
#&amp;gt; Using 3^3 = 27 total bins
ful_absorb &amp;lt;- absorbLayer(ful_init, layer_idx = 3, 
                          function(s) s &amp;lt;= 250,
                          y_range = c(0, 0.8), 
                          highlight_color = &amp;quot;cyan&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-28-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This function is really useful, but fair warning: it can be quite slow. It works by finding the color patch with which each highlighted component shares the longest border and switching the highlighted component to that color, which is more sophisticated than simply switching the patch color, but requires many more calculations. If you find yourself using this a lot, it&amp;rsquo;s a good idea to make sure you&amp;rsquo;ve downsampled your images using the &lt;code&gt;resize&lt;/code&gt; argument.&lt;/p&gt;
&lt;h3 id=&#34;editlayereditlayers&#34;&gt;&lt;code&gt;editLayer&lt;/code&gt;/&lt;code&gt;editLayers&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Applies one of several morphological operations from &lt;code&gt;imager&lt;/code&gt; to a layer (or layers) of a &lt;code&gt;recolorize&lt;/code&gt; object. This can be used to despeckle, fill in holes, or uniformly grow or shrink a color patch. In practice, this is mostly only useful for fixing small imperfections; anything too drastic tends to alter the overall shape of the patch.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# cleans up some of the speckles in the above output
ful_clean &amp;lt;- editLayers(ful_absorb, layer_idx = c(2, 5),
                        operations = &amp;quot;fill&amp;quot;, px_sizes = 3, plotting = T)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-29-1.png&#34; width=&#34;384&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This function is also easy to modify. Internally, it splits the color map into individual masks using &lt;code&gt;splitByColor()&lt;/code&gt; (another recolorize function), then converts those to pixsets for use in &lt;code&gt;imager&lt;/code&gt; before slotting them back in with the unchanged layers.&lt;/p&gt;
&lt;h3 id=&#34;mergelayers&#34;&gt;&lt;code&gt;mergeLayers&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes, you don’t want to define fancy rules for deciding which layers to combine; you just want to combine layers. That’s what this function is for. It takes in a list of numeric vectors for layers to combine (layers in the same vector are combined; those in different list elements are kept separate).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;merge_fit &amp;lt;- mergeLayers(recolorize_defaults, 
                         merge_list = list(1, 2, 
                                           c(3, 5),
                                           c(4, 7),
                                           c(6, 8)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-30-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You might notice this is a bit different than our &lt;code&gt;recluster&lt;/code&gt; results above. That’s because internally, &lt;code&gt;recluster&lt;/code&gt; actually uses &lt;code&gt;imposeColors&lt;/code&gt; to refit the color map, rather than just merging layers; I have found this often produces slightly nicer results, because pixels that were on the border of one cutoff or another don’t get stranded in the wrong layer. On the other hand, &lt;code&gt;mergeLayers&lt;/code&gt; is considerably faster.&lt;/p&gt;
&lt;h2 id=&#34;step-45-visualizations&#34;&gt;Step 4.5: Visualizations&lt;/h2&gt;
&lt;p&gt;Making color maps is an obviously visual process, so it’s good to use visual feedback as much as possible. We’ve already seen a few of these functions in action, specifically &lt;code&gt;plotColorPalette&lt;/code&gt; and &lt;code&gt;plotImageArray&lt;/code&gt;, which are used in almost every function that produces a &lt;code&gt;recolorize&lt;/code&gt; object. I’ll point out three others that I think are quite useful: &lt;code&gt;imDist&lt;/code&gt;, &lt;code&gt;plotColorClusters&lt;/code&gt;, and &lt;code&gt;splitByColor&lt;/code&gt; (which also doubles as an export function).&lt;/p&gt;
&lt;h3 id=&#34;imdist&#34;&gt;&lt;code&gt;imDist&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Compares two versions of the same image by calculating the color distance between the colors of each pair of pixels (&lt;code&gt;imDist&lt;/code&gt;), and gives you a few more options for plotting the results (&lt;code&gt;imHeatmap&lt;/code&gt;). You can use it to get the distances between the original image and the color map:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;layout(matrix(1:2, nrow = 1))

# calculates the distance matrix and plots the results
dist_original &amp;lt;- imDist(readImage(img),
                        recoloredImage(ful_clean), color_space = &amp;quot;sRGB&amp;quot;)

# more plotting options - setting the range is important for comparing 
# across images (max is sqrt(3) in sRGB space, ~120 in Lab)
imHeatmap(dist_original, viridisLite::inferno(100), range = c(0, sqrt(3)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-31-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The resulting object is a simple matrix of distances between each pair of pixels in the given color space. These are essentially residuals:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hist(dist_original, main = &amp;quot;sRGB distances&amp;quot;, xlab = &amp;quot;Distance&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-32-1.png&#34; width=&#34;384&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A word of warning here: it is easy to look at this and decide to come up with a procedure for automatically fitting color maps using a kind of AIC metric, trying to get the lowest SSE with the minimum set of color centers. You’re welcome to try that, but given that this is discarding spatial information, it is probably not a general solution (I haven’t had much luck with it). But there is probably some room to play here.&lt;/p&gt;
&lt;h3 id=&#34;splitbycolor&#34;&gt;&lt;code&gt;splitByColor&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is a dual-use function: by splitting up the color map into individual layers, you not only can examine the individual layers and decide whether they need any editing or merging, but you also get out a binary mask representing each layer, so you can export individual patches.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;layout(matrix(1:10, nrow = 2, byrow = TRUE))

# &#39;overlay&#39; is not always the clearest option, but it is usually the prettiest:
layers &amp;lt;- splitByColor(recluster_results, plot_method = &amp;quot;overlay&amp;quot;)

# layers is a list of matrices, which we can just plot:
lapply(layers, plotImageArray)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-33-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; [[1]]
#&amp;gt; [[1]]$mar
#&amp;gt; [1] 0 0 2 0
#&amp;gt; 
#&amp;gt; 
#&amp;gt; [[2]]
#&amp;gt; [[2]]$mar
#&amp;gt; [1] 0 0 2 0
#&amp;gt; 
#&amp;gt; 
#&amp;gt; [[3]]
#&amp;gt; [[3]]$mar
#&amp;gt; [1] 0 0 2 0
#&amp;gt; 
#&amp;gt; 
#&amp;gt; [[4]]
#&amp;gt; [[4]]$mar
#&amp;gt; [1] 0 0 2 0
#&amp;gt; 
#&amp;gt; 
#&amp;gt; [[5]]
#&amp;gt; [[5]]$mar
#&amp;gt; [1] 0 0 2 0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;step-5-exporting&#34;&gt;Step 5: Exporting&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The whole point of this package is to make it easier to use other methods!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;exporting-to-aimges&#34;&gt;Exporting to aimges&lt;/h3&gt;
&lt;p&gt;The most direct thing you can do is simply export your recolored images as images, then pass those to whatever other tool you’d like to use, although obviously this doesn’t take full advantage of the format:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# export color map
png::writePNG(recoloredImage(recluster_results),
              target = &amp;quot;recolored_corbetti.png&amp;quot;)

# export individual layers from splitByColor
for (i in 1:length(layers)) {
  png::writePNG(layers[[i]],
                target = paste0(&amp;quot;layer_&amp;quot;, i, &amp;quot;.png&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;pavohttpsrdrriocranpavomanpavo-packagehtml-package&#34;&gt;&lt;a href=&#34;https://rdrr.io/cran/pavo/man/pavo-package.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pavo&lt;/a&gt; package&lt;/h3&gt;
&lt;p&gt;You can also convert a recolorize object to a classify object in the wonderful &lt;code&gt;pavo&lt;/code&gt; package and then run an adjacency analysis. Bonus points if you have reflectance spectra for each of your color patches: by combining the spatial information in the color map with the &lt;code&gt;coldist&lt;/code&gt; object generated by spectral measurements, you can run adjacency analysis for the visual system(s) of your choice right out of the box!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# convert to a classify object
as_classify &amp;lt;- classify_recolorize(recluster_results, imgname = &amp;quot;corbetti&amp;quot;)
adj_analysis &amp;lt;- pavo::adjacent(as_classify, xscale = 10)

# run adjacent directly using human perceptual color distances (i.e. no spectral data - proceed with caution)
adj_human &amp;lt;- recolorize_adjacency(recluster_results)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also run an adjacency analysis with &lt;code&gt;recolorize_adjacency&lt;/code&gt;, but only as long as you keep your skeptic hat on. This function works by calculating a &lt;code&gt;coldist&lt;/code&gt; object right from the CIE Lab colors in the color maps, which are themselves probably derived from your RGB image, which is at best a very loose representation of how these colors appear to human eyes. The only reason this is at all reasonable is that it’s producing these values for human vision, so you will be able to see if it’s completely unreasonable. This is fine for getting some preliminary results or if you’re working with aggregate data from many sources and you’re content with specifically human (not just non-UV, but only human) vision. Otherwise, it’s probably a last resort.&lt;/p&gt;
&lt;h3 id=&#34;patternizehttpscranr-projectorgwebpackagespatternizeindexhtml&#34;&gt;&lt;a href=&#34;https://cran.r-project.org/web//packages/patternize/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;patternize&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Coming soon (pending a patternize update), and with many thanks to Steven van Belleghem for his help in making recolorize and patternize get along!&lt;/p&gt;
&lt;h2 id=&#34;some-advice&#34;&gt;Some advice&lt;/h2&gt;
&lt;h3 id=&#34;this-is-a-lot-of-options-how-do-i-choose-a-procedure&#34;&gt;This is a lot of options. How do I choose a procedure?&lt;/h3&gt;
&lt;p&gt;Most things will more or less work; if it looks reasonable, it is. Keep in mind that there is a big difference between getting slightly different color maps and getting qualitatively different results. Keep your final goal in mind. You can also try lots of different things and see if it makes a real difference.&lt;/p&gt;
&lt;p&gt;I wish I could write a single function that would do all of these steps in the correct sequence and produce perfect results; the reason that function does not exist is because I find I have to do experiment a fair amount with every image set, and I often end up with a different order of operations depending on the problem.&lt;/p&gt;
&lt;p&gt;Start with &lt;code&gt;recolorize2&lt;/code&gt; and identify the common problems you&amp;rsquo;re encountering. Does it make sense to batch process all of your images, then refine them individually? Is it better to choose a different cutoff for each image? Luckily, these functions are relatively fast, so you can test out different options.&lt;/p&gt;
&lt;p&gt;You can also get way fancier with cutoffs than I have here. This package is built on some pretty simple scaffolding: you get a starting set of clusters, then you modify them. If you have a better/more refined way of deciding which colors to cluster, then go for it. I will soon be adding some example workflows from collaborators which should be helpful.&lt;/p&gt;
&lt;p&gt;There is another very tempting option: make a small training set of nice color maps manually with recolorize, then use those to either fit a statistical model for other fits or use machine learning to do the rest. I think this is a really compelling idea; I just haven&amp;rsquo;t tested it yet. Maybe you want to try it out?&lt;/p&gt;
&lt;h3 id=&#34;can-you-define-an-optimality-condition-to-do-all-the-segmentation-automatically&#34;&gt;Can you define an optimality condition to do all the segmentation automatically?&lt;/h3&gt;
&lt;p&gt;As far as I can tell, no. This is because of the problem I pointed out at the beginning: the &amp;lsquo;correct&amp;rsquo; segmentation depends on your particular question more than anything else.&lt;/p&gt;
&lt;h3 id=&#34;how-should-you-store-the-code-used-to-generate-a-color-map&#34;&gt;How should you store the code used to generate a color map?&lt;/h3&gt;
&lt;p&gt;I like to use &lt;code&gt;rlang::enexpr&lt;/code&gt; to capture the code I run to generate a color map, and store it as another aspect of the recolorize object, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rlang)

# run this code, then capture it in the brackets:
steps &amp;lt;- {
  fit &amp;lt;- recolorize2(img,bins = 3, cutoff = 50)
  fit2 &amp;lt;- editLayers(fit, c(2, 5),
                     operations = &amp;quot;fill&amp;quot;, px_sizes = 3)
  } %&amp;gt;% enexprs()

fit2$steps &amp;lt;- steps
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;what-about-batch-processing&#34;&gt;What about batch processing?&lt;/h3&gt;
&lt;p&gt;Every function in this package operates on a single image at a time. This is because I&amp;rsquo;ve found that there is so much variation in how people go about batch processing anything: if I tried to impose what I considered to be a useful batch processing structure, within a few months I would find that it was too inflexible for some new project structure I needed to use it for. So, instead, the idea is that you can write your own batch processing functions or for loops as needed to suit your data structure. Or maybe you come up with something better than I can think of, in which case, please let me add it to the package!&lt;/p&gt;
&lt;h3 id=&#34;what-about-machine-learning-approaches&#34;&gt;What about machine learning approaches?&lt;/h3&gt;
&lt;p&gt;Using machine learning could work, but only if you already have segmented images for use in training (which presumably you had to do by hand), and making that training set could be extremely time consuming; and the amount of modification required to get a generic algorithm to work might be unjustifiable given the size of (or variance in) your image set. This problem gets a lot worse the more images we have and the more different they are, especially if you have a lot of variance in a small dataset (pretty typical in comparative biology).&lt;/p&gt;
&lt;p&gt;That said, I don&amp;rsquo;t have much background in ML of any stripe. If you have a handy idea in this area, I would love to know about it.&lt;/p&gt;
&lt;h2 id=&#34;just-for-fun&#34;&gt;Just for fun&lt;/h2&gt;
&lt;p&gt;There are two fun functions in here: &lt;code&gt;wernerColor&lt;/code&gt; and &lt;code&gt;recolorizeVector&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wernerColor&lt;/code&gt; remaps a recolorize object to the colors in Werner&amp;rsquo;s Nomenclature of Colors by Patrick Syme (1821), one of the first attempts at an objective color reference in western science, notably used by Charles Darwin. This is always fun to try out, especially given how many things get tagged as &amp;ldquo;veinous blood red&amp;rdquo; (delightful!):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rc_werner &amp;lt;- wernerColor(recluster_results)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-37-1.png&#34; width=&#34;480&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, &lt;code&gt;recolorizeVector&lt;/code&gt; converts a bitmap (i.e. pixel) image to a vector image.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rc_vector &amp;lt;- recolorizeVector(recluster_fit, 
                              size_filter = 0.15,
                              smoothness = 5, plotting = TRUE)

# to save as an SVG:
svg(filename = &amp;quot;corbett_vector.svg&amp;quot;, width = 2, height = 4)
plot(rc_vector)
dev.off()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/introduction-to-recolorize/index_files/figure-html/unnamed-chunk-39-1.png&#34; width=&#34;144&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This function is VERY experimental. If it gives you errors or looks too funky, try decreasing the size filter (which absorbs all components below some size to simplify the image) and the smoothness. Then again, sometimes you want things to look funky. If this is the case, &lt;code&gt;recolorizeVector&lt;/code&gt; will happily enable you.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
